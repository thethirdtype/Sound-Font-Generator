import os
import argparse
import numpy as np
from scipy.io import wavfile


r'''

To use this app, run it from the command line with the required arguments. For example:

Linux:
python sound_font_generator.py --input_file input.wav --pitch_adjustment 300 --pitch_divisions 3 --output_prefix hum 
--output_folder sounds/

Windows:
python sound_font_generator.py --input_file "C:\sounds\input.wav" --pitch_adjustment 300 --pitch_divisions 3 
--output_prefix hum --output_folder "C:\sounds"

This will generate 3 output files with the prefixes "hum(1)", "hum(2)", and "hum(3)" in the "sounds" folder, where 
the pitch adjustment is 0, 150, and 300 samples (respectively) and the files are not reversed. Note that you can use the 
--reverse flag to reverse the output files.

'''


def bend_sound(input_file, reverse, pitch_adjustment, pitch_divisions, output_prefix, output_folder):
    try:
        # Read input file
        sample_rate, audio_data = wavfile.read(input_file)
    except FileNotFoundError:
        print(f"Error: Input file '{input_file}' not found.")
        return
    except ValueError:
        print(f"Error: Input file '{input_file}' is not a valid WAV file.")
        return

    # Apply pitch adjustment
    if pitch_divisions > 1:
        pitch_adjustments = np.linspace(0, pitch_adjustment, pitch_divisions)
    else:
        pitch_adjustments = [pitch_adjustment]

    # Generate output files
    for i, pitch_adjustment in enumerate(pitch_adjustments):
        # Apply pitch adjustment
        if pitch_adjustment != 0:
            adjusted_data = np.roll(audio_data, int(pitch_adjustment))
            if pitch_adjustment < 0:
                adjusted_data[pitch_adjustment:] = audio_data[:pitch_adjustment]
            else:
                adjusted_data[:pitch_adjustment] = audio_data[-pitch_adjustment:]
        else:
            adjusted_data = audio_data

        # Reverse data if needed
        if reverse:
            adjusted_data = adjusted_data[::-1]

        # Write output file
        output_file = os.path.join(output_folder, f"{output_prefix}({i+1}).wav")
        try:
            wavfile.write(output_file, sample_rate, adjusted_data)
        except FileNotFoundError:
            print(f"Error: Output folder '{output_folder}' not found.")
            return


if __name__ == "__main__":
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Sound Font Bender")
    parser.add_argument("--input_file", type=str, help="Input file")
    parser.add_argument("--reverse", action="store_true", help="Reverse output files")
    parser.add_argument("--pitch_adjustment", type=float, default=0, help="Pitch adjustment (in samples)")
    parser.add_argument("--pitch_divisions", type=int, default=1, help="Number of pitch divisions")
    parser.add_argument("--output_prefix", type=str, help="Output file prefix")
    parser.add_argument("--output_folder", type=str, help="Output folder")
    args = parser.parse_args()

    # Generate sound files
    bend_sound(args.input_file, args.reverse, args.pitch_adjustment, 
               args.pitch_divisions, args.output_prefix, args.output_folder)
