import argparse
import datetime
import os
import configparser

def create_config_file(config_file):
    config = configparser.ConfigParser()
    config['DEFAULT'] = {'version': '1.0'}
    with open(config_file, 'w') as file:
        config.write(file)

def parse_config_file(config_file):
    if not os.path.exists(config_file):
        create_config_file(config_file)
        next_color_entry = 1
        found_line = 0
    else:
        config = configparser.ConfigParser()
        config.read(config_file)
        last_line_number = len(config) - 1
        found_line = last_line_number
        next_color_entry = 1
        for i, line in enumerate(config):
            if line.startswith('Color-'):
                found_line = i
                number = int(line.split('=')[0].split('-')[1])
                next_color_entry = number + 1
    return next_color_entry, found_line

def generate_output_string(blade_color, light_effect, on_speed, off_speed, blade_style, next_color_entry):
    output_string = f'Color-{next_color_entry}=({blade_color}),{light_effect},{on_speed},{off_speed},{blade_style}'
    return output_string

def write_output_string_to_config_file(output_string, config_file, found_line):
    config = configparser.ConfigParser()
    config.read(config_file)
    config.set('DEFAULT', f'line{found_line + 1}', output_string)
    with open(config_file, 'w') as file:
        config.write(file)

def create_project_file(output_folder, project_name, author_name):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    if not project_name:
        return
    file_name = os.path.join(output_folder, f'{project_name}.txt')
    author_str = f' © {author_name}' if author_name else ''
    date_str = datetime.date.today().strftime('%d %B %Y')
    content = f'“{project_name}”{author_str} {date_str}.'
    with open(file_name, 'w') as file:
        file.write(content)

def main():
    parser = argparse.ArgumentParser(description='Sound Font Generator')
    parser.add_argument('config_file', type=str, help='Config File')
    parser.add_argument('--output_folder', type=str, help='Output Folder')
    parser.add_argument('--project_name', type=str, help='Project Name')
    parser.add_argument('--author_name', type=str, help='Author Name')
    parser.add_argument('--blade_color', type=str, required=True, help='Blade Color')
    parser.add_argument('--light_effect', type=int, required=True, help='Light Effect')
    parser.add_argument('--blade_style', type=int, required=True, help='Blade Style')
    parser.add_argument('--on_speed', type=int, required=True, help='On Speed')
    parser.add_argument('--off_speed', type=int, required=True, help='Off Speed')
    args = parser.parse_args()

    next_color_entry, found_line = parse_config_file(args.config_file)
    output_string = generate_output_string(args.blade_color, args.light_effect, args.on_speed, args.off_speed, args.blade_style, next_color_entry)
    write_output_string_to_config_file(output_string, args.config_file, found_line)

    create_project_file(args.output_folder, args.project_name, args.author_name)

if __name__ == '__main__':
    main()
